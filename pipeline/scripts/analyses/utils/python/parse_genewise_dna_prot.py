import argparse
import os
import sys
import pandas as pd
import numpy as np
import re
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
parser = argparse.ArgumentParser()

parser.add_argument('-i', '--input', type=str, required=True, help='zf results')
parser.add_argument('-o', '--output_dir', type=str, required=True, help='dir of fasta files')

args = parser.parse_args()

# define patterns

pattern1 = r'..C..C.{12}H...H.{5}'
pattern2 = r'..C..C.{12}H....H.{5}'
flog = open("toto.log", "w")

with open(args.input,'r') as reader :
    dico_gene = {}
    dico_prot = {}
    flag_write = 0
    flag_start = 0
    # name = "none"
    # sequence = "none"
    for line in reader.readlines(): 
        buf = line.split()
        if line[0] == ">"  and buf[0] != ">Results":
            sequence = ""
            name = line.lstrip(">").rstrip()
            infos = name.split(":")
            #print("INFOS = ",infos)
            gene_info = ":".join((infos[0],infos[1]))
            infos = name.split(".")
            info = infos.pop().rstrip()
            #print("INFOS = ",infos)
            #print("INFO = ["+info+"]")
            if info == "pep" :
                type = "protein"
            elif info == "sp" :
                type = "dna"
            else :
                sys.exit("Unknow type")

            flag_write = 1
            flag_start = 1
        if line[0] == "/"  and flag_start == 1 :
            flag_write = 0    
            seq = Seq(sequence)
            record = SeqRecord(seq, id=name,name=gene_info,description="Generated by genewise ("+type+")")
            #print(record)
            if type == "protein" :
                dico_prot[gene_info] = record
            else :
                dico_gene[gene_info] = record

        if flag_write == 1  :
            #print(line)
            if line[0] != ">" :
                sequence += line.rstrip()
    if dico_gene.keys() != dico_prot.keys() :
        sys.exit("Error in gene and protein dictionnaries")
    for key in dico_gene.keys() :
        print("GENE " + key)
        print()
        print(dico_gene[key])
        print()
        print(dico_prot[key])
        flog.write("========================================================\n")
        flog.write("Processing ["+key+"]\n")
        flog.write("========================================================\n")
        prot_seq = str(dico_prot[key].seq)
        dna_seq = str(dico_gene[key].seq)
        translated_seq  = str(dico_gene[key].translate().seq)
        print(prot_seq)
        print(translated_seq)
        if prot_seq != translated_seq :
            print("WARNING!Translated dna sequence and protein sequence are different",file=sys.stderr)
            print("AA:           "+prot_seq,file=sys.stderr)
            print("Transl. DNA : "+translated_seq,file=sys.stderr)
        # Recherche des patterns
        # 
        list_of_matches = []
        for pattern in [pattern1,pattern2]:
            print("\nPattern "+pattern+":\n")
            matches_test = re.finditer(pattern, prot_seq)
            for match in matches_test:
                list_of_matches.append([pattern,match])
        sorted_list_of_matches = sorted(list_of_matches, key=lambda element: element[1].span()[0])   # sorrt
        print(sorted_list_of_matches)


        tandem = 0 # will increment for each group of tandem zincfingers
        match_nb = 1 # num of the match in set
        match_tandem_nb = 1 # num of the match in set of tandem zincfingers

        for element in sorted_list_of_matches:
            match  = element[1]
            pattern = element[0]
            if match_nb == 1 :
                current_tandem = match.span()[1]
            if match.span()[0] > current_tandem:
                tandem +=1
                match_tandem_nb = 1
            flog.write("\nMatch "+str(match_nb)+" "+str(match_tandem_nb)+" "+str(tandem)+" "+str(match.span()[0]) + "-"+str(match.span()[1]))
            current_tandem = match.span()[1]
            # get the matching part of the sequence
            zf_length = match.span()[1] - match.span()[0]
            zf = prot_seq[match.span()[0] : match.span()[1]]
            flog.write("("+str(zf_length)+")\n")
            flog.write("Original sequence :    "+str(match.group())+"\n")
            
            modified = False
            if zf_length == 28 :
                modified = True
                zf = prot_seq[match.span()[0] : match.span()[0]+19] + "X" + prot_seq[match.span()[0] + 19 : match.span()[1]]
            flog.write("Modified sequence :    "+zf+"\n")

            if modified == False :
                zf_dna = dna_seq[match.span()[0]*3 : match.span()[1]*3]
            else :
                zf_dna = dna_seq[match.span()[0]*3 : match.span()[0]*3+19*3] + "NNN" + dna_seq[match.span()[0]*3 + 19*3 : match.span()[1]*3]

            dna_record = SeqRecord(Seq(zf_dna), id="ZF",name="gene_info",description="Gbof")
            dna_trad_seq = str(dna_record.translate().seq)
            flog.write("DNA sequence :         "+zf_dna+"\n")
            flog.write("Transl. DNA sequence : "+dna_trad_seq+"\n")
            if dna_trad_seq != zf :
                print("WARNING!Translated dna match and protein match are different",file=sys.stderr)
                print("AA:           "+zf,file=sys.stderr)
                print("Transl. DNA : "+dna_trad_seq,file=sys.stderr)

        print("==============================================================")