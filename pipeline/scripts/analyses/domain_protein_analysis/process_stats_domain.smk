## Main snakemake for domain analysis on protein data
## Date : Decembre 2024
## Authors :


# Import python modules
# ---------------------
import os
import json

# Function to load JSON files
# ---------------------------
def load_json(file_path):
    with open(file_path, "r") as file:
        return json.load(file)

# Assign environment variables
# ----------------------------
globals().update(load_json("../environment_path.json"))


# Configuration
# -------------
configfile: "config.json"

# List of assemblies
# ------------------
ACCESSNB = config["assembly_list"]

# Name of the analyse. The name is  used in several places:
# - in pathGTDriftResource:
#   it contains the resources used by the analyses : the fasta alignment files
#   and generated by the analysis : the hmm profiles and databases
# -----------------------------------------------------------------------
ANALYSE_DIR  = config["analyse_dir_name"]

# The reference domain used to filter out paralogs during paralogy checks
# -----------------------------------------------------------------------
DOMAIN_REFERENCES = config["domain_references"]

# List of domains to be processed. 
# ------------'-------------------
DOMAINS = config["domains"]

# List of domains to be processed. 
# ------------'-------------------
DOMAINS_SIMPLE = config["domains_simple"]

# Name of global results directory.
# The directory is located in pathGTDriftGlobalResults
# ----------------------------------------------------
GLOBAL_RESULTS = config["analyse_dir_name"]

# Name of genome specific results directory.
# The directory is located in genome_assembly/{accession}/analyses/
# -----------------------------------------------------------------
GENOME_RESULTS = config["analyse_dir_name"]

if config["mode"] == "guix":
    RUNCMD = "guix shell hmmer -- "
else:
    RUNCMD = ""
    
def get_reference(wildcards):
    fname = DOMAIN_REFERENCES.get(wildcards.domain, "")
    return fname 

def get_reference_file(wildcards):
    fname = DOMAIN_REFERENCES.get(wildcards.domain, "")
    domain = wildcards.domain
    return pathGTDriftResource + ANALYSE_DIR + "hmm_profiles/"+ domain+"/"+fname+".hmm"
    
#directories, files = glob_wildcards(pathGTDriftResource + "ref_align_for_paralogy_check/{dir}/{file}.fst")  
directories, files = glob_wildcards(pathGTDriftResource + ANALYSE_DIR + "reference_alignments/{dir}/{file}.fst")

# Rules
# -----

# --------------------------------------------------------------
# all : inputs define the files generated at the end of process. 
# --------------------------------------------------------------
rule all:
    """
    Get the candidates in fasta format
    """
    input:
        #All Hmm profiles
        all_hmm_profiles=expand(pathGTDriftResource + ANALYSE_DIR + "hmm_profiles/{dir}/{file}.hmm",
               zip, dir=directories, file=files),
        # Candidates after pararlog checks
        # --------------------------------
        candidates=expand(
            pathGTDriftData
           + "genome_assembly/{accession}/analyses/" + GENOME_RESULTS
            + "candidates_{domain}.fasta",
            accession=ACCESSNB,domain=DOMAINS
        ),

        # Candidates without pararlog checks
        # --------------------------------
        candidates_simple=expand(
            pathGTDriftData
           + "genome_assembly/{accession}/analyses/" + GENOME_RESULTS
            + "candidates_1_{domain}.fasta",
            accession=ACCESSNB,domain=DOMAINS_SIMPLE
        ),
        summary_simple=expand(
            pathGTDriftData
            + "genome_assembly/{accession}/analyses/" + GENOME_RESULTS +"summary_hmmsearch_{accession}_{domain}.csv",
            accession=ACCESSNB,domain=DOMAINS_SIMPLE)
               
#rule calchmm:
#    input:
#       expand(pathGTDriftResource + "ref_align_for_paralogy_check/{dir}/{file}.fst", dir=directories, file=files),
#    output:
#        expand(pathGTDriftResource + "ref_align_for_paralogy_check/{dir}/{file}.hmm2", dir=directories, file=files),
#    shell:
#        "{RUNCMD} hmmbuild {output} {input}"        
        

# Modules snakemake
# -----------------

include: "../utils/module_stats_domain.smk"
include: "../utils/module_check_paralogs.smk"
include: "../utils/module_hmm.smk"
#include: "../utils/module_build_paralogs.smk"
